# Default values for standard.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: registry.barebone.ldmz/prog/demo/todo-api
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: "feature-cookie-auth"

imagePullSecrets: [ ]
nameOverride: ""
fullnameOverride: ""

env:
  QUARKUS_PROFILE: 'cookie'
  QUARKUS_DATASOURCE_REACTIVE_URL: 'postgresql://todo-api-postgresql:5432/todo-api'
  QUARKUS_DATASOURCE_JDBC_URL: 'jdbc:postgresql://todo-api-postgresql:5432/todo-api'
  QUARKUS_HTTP_CORS_ORIGIN: '*'
  QUARKUS_HTTP_SAME_SITE_COOKIE__QUARKUS_SESSION__VALUE: 'None'

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: { }
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: { }
podLabels: { }

podSecurityContext:
  fsGroup: 2000
  runAsNonRoot: true
  seccompProfile:
    type: RuntimeDefault

securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: true
  runAsUser: 65535
  runAsNonRoot: true

service:
  type: ClusterIP
  port: 8080

ingress:
  enabled: true
  className: ""
  annotations:
    cert-manager.io/cluster-issuer: "web-issuer"
    traefik.ingress.kubernetes.io/router.middlewares: "kube-system-redirect-https@kubernetescrd"
  # kubernetes.io/ingress.class: nginx
  # kubernetes.io/tls-acme: "true"
  hosts:
    - host: todo-api.barebone.ldmz
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls:
    - secretName: todo-api-barebone-ldmz
      hosts:
        - todo-api.barebone.ldmz

resources: { }
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
#   memory: 128Mi
# requests:
#   cpu: 100m
#   memory: 128Mi

livenessProbe:
  httpGet:
    path: /q/health/live
    port: http
readinessProbe:
  httpGet:
    path: /q/health/ready
    port: http

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes:
  - name: tmp
    emptyDir: { }
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts:
  - name: tmp
    mountPath: /tmp
    readOnly: false

# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: { }

tolerations: [ ]

affinity: { }

postgresql:
  enabled: true
  auth:
    username: todo-api
    database: todo-api

secret:
  # echo -n "$(pwgen 80 1)" | kubeseal --raw --name postgresql --namespace todo-api
  postgresPassword: 'AgAORWO7MDtETeYZj9BNgEt0Rf3/d4mICyyuZHYm7rk1V9K8+SKHJsIxefx7l8aY4LNvauSSWa4rUoGa1c5dXqdQB5/6+I2JWStqCWdmFz5YQkH0iJC/ltM+VFLLVNzWzNPSJg0R05mgQJPAHPYWl99vN0BofoLCyy1bmdnOosc2RvU7P2/jsO72EI/6vLmV4M4yYjzQcyoacmXO+GTScSCL1hdKj7m1X8HL2KQtF8R9a1LkEiTS0uC7ToxETGPsUDgFqmI9nWhoCTLupTCSC2tq+2gLUrR7sQbwiDKEkNOoflXG8AALGirxNt6iNM4EvuoSGC/s8HcKsvRVXh6MELb6cN0O+Z4Nlv2Uzvqfi61XgICWWU0gNzQYJBvxDDmrrB1xTRg2V2JpOPsHjMgFDdg2IlFu62qh8j4MNliiACnFaDN0lrfYSo3hko/a3858FcT+WdUtazdZVHyGUFhUtCQKpYCt0FXRGdexkGbzq1RV2ZNm4vr98Tw2ZVxbmGQcO4nVX2OA3+X0m3Cq6ZmE345HQP+EZBfZhtdQdHMQlHCwRiuhTChgQCStASC4hjaI1mMsm/3VVKEI5OIwwrRolDsu4C/AlhPC5u2cItniCQpyNevo+mnpwTRaw9n6AKAAHaQA4rLqsLtZaabyZpiwwHbDZdbW5bWiogOOtjOovFvQaRtv1ETZW6ih/db5UR0TSaE1GUZJkoRKef8HKmsGOj/r56e/qjt1NATSj3bQx6scbyCivcUQjaw3n/isHsB5E4ydPFfbpiHqC8gAoQBiT7q4/PxwizEcnD5ON3Jixp3O+w=='
  # pwgen 80 1 | kubeseal --raw --name postgresql --namespace todo-api
  dbPassword: 'AgAv9ye1dVEO9DYqvj+OkxyfQpC9JJDephQMnGZcLJUUCpIAuSu69fffneRjFshz9oNhJIc5agI+vPk5MQeXICsqFegRDl2oxhVAzS9QwkpbrMMCFkxeReSGM6qpf/KK85TMKsL+NxzwXrP1CqeWDFO46uVHnrzytB+pOSRRW1XzwFQi1ZvsYp8b6d8s3eo/whSY5Y3FdtpwEzUalXk6ldgqVM1V3jCxIQzE0qkVDU41J8KYKxPjFjIulGGcTcv+twWKN7n7gwN+YW7kL3HURzd/gubCj5WL4Jo0B6Qngzz5Gem2nC5fGfuZ4H/nMdNaQ1gawwPrgKENFd1AM+VE7pUC98YTwkFB7seiXRTNs0gGK6RltfGPc/USD3GkiMwJjVFi0K829zkUxv4815hTvVG9lkV9OLgoY/GzaG2cVCUsCI8SpWdNc6BYLlgmp64/Srz2XWSUKmII6yGEK5Lto4XmSC3GbOzwtee3+nKTvS+31E8kuOyB34IaSYUiMi4ARagYisQwBqFAfv0fYYji0v7VeZVM/pLpOPA8eLogUMoM6Lc2gNurOcY/00D0l7Pub6EEp6a6sCgPK9EOgJagaCteeP3uP78mHgGer/s5FVogUqfzIbzS5LE6B/XlQlYpPv9lwONIConIjP9rSKDsjO+RTmVLCmERxeRoMrx33rl2ub0ctkIVaOR3pmMof1zWbyWcBrqpqchkw4aa7z9NIZyWbceC3PGvUfWzts8MrsM6qzoH6BPuRzqNBldlPe9pnrP/6SXKcOcIDWLZAAXBsqiR0x2nCHRYx7VKabeUu6iD/WE='
  postgresPasswordEnvVarName: QUARKUS_DATASOURCE_PASSWORD
